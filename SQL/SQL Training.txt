SELECT DISTINCT
SELECT DISTINCT productLine FROM `products` ORDER BY productLine ASC;
SELECT DISTINCT country FROM `customers` ORDER BY country ASC;

SELECT AS
SELECT CustomerName AS 'Imię i nazwisko' , City AS 'Miasto'  FROM `customers`;
SELECT ProductName, Price AS 'Ceny napojów rosnąco' FROM `products`  WHERE CategoryID = 1 ORDER BY Price ASC;
SELECT CustomerName AS 'Lista klientów z Niemiec' FROM `customers` WHERE Country = 'Germany';
SELECT MIN(BirthDate) AS 'Data urodzenia najstarszego pracownika' FROM employees;

SELECT WHERE
SELECT * FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-03-01' ORDER BY paymentDate ASC
SELECT * FROM `employees` WHERE BirthDate > '1960-01-01';

SELECT MIN
SELECT MIN(paymentDate), customerNumber,checkNumber,amount FROM `payments`;

SELECT MIN(Price) FROM `products`;
SELECT MIN(buyPrice) FROM `products`;

SELECT MAX
SELECT MAX(Price) FROM `products`;
SELECT MAX(amount) AS 'Najwyższa płatność' FROM `payments`;
SELECT MAX(amount) FROM payments WHERE customerNumber = '112';

SELECT COUNT
SELECT COUNT(CustomerID) FROM `customers` WHERE Country = 'Mexico';
SELECT customerNumber, COUNT(Amount), checkNumber, paymentDate FROM payments WHERE NOT amount < 10000 Group BY customerNumber ORDER BY COUNT(amount) DESC;
SELECT COUNT(customerNumber), country FROM customers GROUP BY country ORDER BY COUNT(customerNumber) DESC;
SELECT COUNT(productCode) FROM products WHERE productScale = '1:10'


SELECT AVG
SELECT AVG(Price) FROM `products` WHERE CategoryID = 1;
SELECT AVG(amount) FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-12-31'

SELECT SUM
SELECT SUM(Price) FROM products WHERE CategoryID = 2;
SELECT SUM(Price) FROM `products` WHERE SupplierID = 2;
SELECT SUM(amount) FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-01-31'
SELECT SUM(amount), customerNumber FROM payments GROUP BY customerNumber ORDER BY SUM(amount) ASC

SELECT AVG
SELECT AVG(Price) AS 'Średnia Cena napojów' FROM `products` WHERE CategoryID = 1;

ORDER BY ASC
SELECT * FROM `products` ORDER BY Price ASC;

ORDER BY DESC
SELECT * FROM `employees` ORDER BY BirthDate DESC;
SELECT * FROM orderdetails ORDER BY quantityOrdered DESC;

WHERE LIKE
SELECT * FROM `employees` WHERE FirstName LIKE 'A%';
SELECT * FROM `products` WHERE quantityInStock LIKE '8___';
SELECT * FROM `customers` WHERE customerName LIKE 'A_E%';

WHERE AND
SELECT * FROM `products` WHERE NOT productLine = "ships" AND NOT productLine = "Planes";
SELECT * FROM payments WHERE customerNumber = 141 AND amount > 10000;
SELECT * FROM `customers` WHERE Country = 'Italy' AND City = 'Rome';

WHERE NOT
SELECT * FROM `products` WHERE NOT productLine = "ships" AND NOT productLine = "Planes";
SELECT * FROM payments WHERE NOT amount < 10000 ORDER BY amount;
SELECT Count(customerNumber), country FROM `customers` WHERE NOT country = 'USA' Group by country DESC;

WHERE BETWEEN
SELECT * FROM `employees` WHERE BirthDate BETWEEN '1950-01-01' AND '1960-01-01' ORDER BY BirthDate DESC;
SELECT * FROM `products` WHERE quantityInStock BETWEEN 1 And 2000 ORDER BY quantityInStock ASC;
SELECT * FROM `products` WHERE quantityInStock BETWEEN 1 AND 1000 ORDER By quantityInStock DESC

INSERT INTO
INSERT INTO employees VALUES (NULL, 'prcownik', 'roku', '1995-01-22', NULL, NULL);
INSERT INTO offices VALUES(8, 'Wrocław', null, 'wrocławska 23', null, 'Dolnośląskie', 'Polska', '50-550', 'EU')

UPDATE
UPDATE employees SET Photo = 'brzydkie zdjęcie.jpg', Notes = 'nasz wymarzony pracownik' WHERE EmployeeID = 11;
UPDATE products SET productLine = 'Classic Cars' WHERE productCode = 'S10_1678'
UPDATE employees SET jobTitle = 'VP Marketing' WHERE employeeNumber = 1056;
UPDATE customers SET addressLine2 = 'Rue Royale' Where customerNumber = 103;
UPDATE offices SET addressLine2 = 'Rue Morgue 1', state = 'Provance' WHERE officeCode = 4

LIMIT
SELECT * FROM `products` ORDER BY Price DESC LIMIT 3;
SELECT COUNT(productCode), productLine FROM `products` GROUP BY productLine LIMIT 3;
SELECT * FROM `payments` WHERE paymentDate BETWEEN '2004-01-01' AND '2004-12-31' ORDER BY amount DESC LIMIT 5;
SELECT * FROM payments WHERE paymentDate BETWEEN '2003-01-01' And '2003-12-31' ORDER BY amount DESC LIMIT 10;

WHERE OR
SELECT * FROM `products` WHERE CategoryID = 1 OR CategoryID = 2;
SELECT Count(orderNumber), status FROM `orders` Where status = 'cancelled' OR status = 'disputed' GROUP BY status;

WHERE IS NOT NULL
SELECT * FROM customers WHERE addressLine2 IS NOT NULL
SELECT * FROM customers WHERE country = 'Australia' AND addressLine2 IS NOT NULL;
SELECT * FROM orders WHERE comments IS NOT NULL;
SELECT * FROM `offices` WHERE state IS NOT NULL

DELETE
DELETE FROM `orders` WHERE OrderID = 10448

GROUP BY
SELECT * FROM `customers` GROUP BY Country;
SELECT Country, COUNT(CustomerID) FROM customers Group BY Country ORDER BY  COUNT(CustomerID) DESC;
SELECT COUNT(productCode), productScale FROM products GROUP BY productScale ORDER BY COUNT(productCode) DESC LIMIT 5;
SELECT COUNT(orderNumber) AS 'Liczba zamówień' , customerNumber AS 'Numer kienta' FROM `orders` GROUP BY customerNumber ORDER BY COUNT(orderNumber) DESC;

HAVING
SELECT Country, COUNT(CustomerID) FROM customers Group BY Country HAVING COUNT(CustomerID) > 10 ORDER BY COUNT(CustomerID) DESC;
SELECT CategoryID AS 'Kategoria', COUNT(ProductID) FROM `products` GROUP BY CategoryID HAVING COUNT(ProductID) >= 12 ORDER BY COUNT(ProductID) DESC;
SELECT COUNT(CustomerID), Country FROM customers GROUP BY Country HAVING COUNT(CustomerID) >= 5 ORDER BY COUNT(CustomerID) DESC;
SELECT COUNT(productCode), productLine FROM `products` GROUP BY productLine HAVING COUNT(productCode) > 10 ORDER BY COUNT(productCode) DESC;

INNER JOIN
SELECT employees.*, offices.country FROM employees INNER JOIN offices ON employees.officeCode = offices.officeCode;
SELECT products.ProductName, suppliers.Country FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID ORDER BY ProductName ASC;
SELECT customers.customerName, employees.email, employees.jobTitle FROM customers INNER JOIN employees ON customers.salesRepEmployeeNumber=employees.employeeNumber order by employees.email ASC;

LEFT JOIN
SELECT orders.OrderID, employees.LastName FROM orders LEFT JOIN employees ON orders.EmployeeID = employees.EmployeeID ORDER BY LastName;
SELECT products.productname, productlines.textDescription FROM products LEFT JOIN productlines ON products.productLine = productlines.productLine;
SELECT payments.amount , customers.customerName FROM payments LEFT JOIN customers ON payments.customerNumber = customers.customerName;

RIGHT JOIN
SELECT orders.OrderID, employees.LastName FROM orders RIGHT JOIN employees ON orders.EmployeeID = employees.EmployeeID ORDER BY LastName;
SELECT orderdetails.productcode, orders.status FROM orderdetails RIGHT JOIN orders ON orderdetails.orderNumber = orders.orderNumber;
SELECT orderdetails.ordernumber, orderdetails.quantityOrdered, products.buyPrice FROM orderdetails RIGHT JOIN products ON orderdetails.productCode = products.productCode;
SELECT categories.CategoryName, products.ProductName FROM categories RIGHT JOIN products ON categories.CategoryID = products.CategoryID ORDER BY Categories.CategoryName ASC

INSERT INTO
INSERT INTO products VALUES ('s11' , 'XXX', 'Motorcycles' , '1:11' , 'x' , 'x', 'x', 'x', 'x' );
INSERT INTO offices VALUES(NULL, 'Wrocław', '733 053 505', 'Pl. Zgody', '9/13', 'Dolnośląskie', 'Poland', '50-432', 'Europe') 
INSERT INTO Projects VALUES(2, 'NewApp', 'BestApps', '1987-11-18') 

DELETE
DELETE FROM products WHERE productName = 'XXX'

UNION / UNION ALL
SELECT city FROM customers UNION SELECT city FROM  offices ORDER By city ASC;

CREATE DATABASE
CREATE DATABASE Testowa

CREATE TABLE
CREATE TABLE test_table (Number int PRIMARY KEY AUTO_INCREMENT, Name varchar(20), Last_name varchar(20), Birth_Date int);
CREATE TABLE new_table (column1 int(20) AUTO_INCREMENT PRIMARY KEY, column2 varchar(20) NOT NULL);
CREATE TABLE Table_22 (Id_Number int AUTO_INCREMENT PRIMARY KEY, FirstName varchar(20) , LastName Varchar (20), Country Varchar (20), Phone_number int (40) NOT NULL )
CREATE TABLE Projects ( ProjectId int NOT NULL AUTO_INCREMENT PRIMARY KEY, Project_Name varchar(20), Customer varchar(20), RunDate date)

DROP TABLE
DROP TABLE test_table

ALTER TABLE ADD
ALTER TABLE test_table ADD Country Varchar(20)

ALTER TABLE MODIFY COLUMN
ALTER TABLE test_table MODIFY COLUMN Birth_Date int NOT NULL

ALTER COLUM DROP COLUMN
ALTER TABLE test_table DROP COLUMN Country

Błędy:

SELECT AVG(Price) FROM `products` WHERE CategoryID = 1 AS 'Średnia Cena napojów'
-->AS powinien się znajdować zaraz za SELCTem
SELECT AVG(Price) AS 'Średnia Cena napojów' FROM `products` WHERE CategoryID = 1;

SELECT * AS 'Lista klientów z Niemiec' FROM `customers` WHERE Country = 'Germany';
--> AS odnosi się do konkretnej kolumny - nie można użyć SELECT *
SELECT CustomerName AS 'Lista klientów z Niemiec' FROM `customers` WHERE Country = 'Germany';

SELECT * FROM `products` WHERE quantityInStock LIKE (8___);
--> Wytyczne dla funkcji Like zostały umieszczone w nawiasie zamiast w cudzysłowiu
SELECT * FROM `products` WHERE quantityInStock LIKE '8___';

SELECT * FROM `products` WHERE productLine IS NOT "ships" AND productLine IS NOT "Planes"
--> Niepoprawna klauzula - zamiast IS NOT powinno być jak poniżej:
SELECT * FROM `products` WHERE NOT productLine = "ships" AND NOT productLine = "Planes";

SELECT customers.customerName, employees.email, employees.jobTitle FROM 'customers' INNER JOIN 'employees' ON customers.salesRepEmployeeNumber=employees.employeeNumber order by employees.email ASC;
--> nazwy tabel które mają być połączone umieszczone w cudzysłowiu
SELECT customers.customerName, employees.email, employees.jobTitle FROM customers INNER JOIN employees ON customers.salesRepEmployeeNumber=employees.employeeNumber order by employees.email ASC;